using System;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Data;
using Lab05.WebsiteBanHang.Models;
using Microsoft.EntityFrameworkCore;

namespace Lab05.WebsiteBanHang.Repositories
{
    public class EFCartRepository : ICartRepository
    {
        private readonly ApplicationDbContext _context;

        public EFCartRepository(ApplicationDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        public async Task<Cart> GetCartByUserIdAsync(string userId)
        {
            if (_context.Carts == null)
            {
                throw new InvalidOperationException("Carts table is not available.");
            }

            var cart = await _context.Carts
                .Include(c => c.Items)
                .ThenInclude(ci => ci.Product)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null)
            {
                cart = new Cart { UserId = userId, Items = new System.Collections.Generic.List<CartItem>() };
                await _context.Carts.AddAsync(cart);
                await _context.SaveChangesAsync();
            }

            return cart;
        }

        public async Task AddCartItemAsync(CartItem cartItem)
        {
            if (cartItem == null)
            {
                throw new ArgumentNullException(nameof(cartItem));
            }

            if (_context.CartItems == null)
            {
                throw new InvalidOperationException("CartItems table is not available.");
            }

            await _context.CartItems.AddAsync(cartItem);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateCartItemAsync(CartItem cartItem)
        {
            if (cartItem == null)
            {
                throw new ArgumentNullException(nameof(cartItem));
            }

            if (_context.CartItems == null)
            {
                throw new InvalidOperationException("CartItems table is not available.");
            }

            var existingItem = await _context.CartItems.FindAsync(cartItem.Id);
            if (existingItem == null)
            {
                throw new KeyNotFoundException($"CartItem with ID {cartItem.Id} not found.");
            }

            existingItem.Quantity = cartItem.Quantity;
            await _context.SaveChangesAsync();
        }

        public async Task RemoveCartItemAsync(int cartItemId)
        {
            if (_context.CartItems == null)
            {
                throw new InvalidOperationException("CartItems table is not available.");
            }

            var cartItem = await _context.CartItems.FindAsync(cartItemId);
            if (cartItem == null)
            {
                throw new KeyNotFoundException($"CartItem with ID {cartItemId} not found.");
            }

            _context.CartItems.Remove(cartItem);
            await _context.SaveChangesAsync();
        }

        public async Task ClearCartAsync(string userId)
        {
            if (_context.Carts == null)
            {
                throw new InvalidOperationException("Carts table is not available.");
            }

            var cart = await _context.Carts
                .Include(c => c.Items)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart != null && cart.Items.Any())
            {
                _context.CartItems.RemoveRange(cart.Items);
                await _context.SaveChangesAsync();
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Data;
using Lab05.WebsiteBanHang.Models;
using Microsoft.EntityFrameworkCore;

namespace Lab05.WebsiteBanHang.Repositories
{
    public class EFCategoryRepository : ICategoryRepository
    {
        private readonly ApplicationDbContext _context;

        public EFCategoryRepository(ApplicationDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        public async Task<IEnumerable<Category>> GetAllAsync()
        {
            if (_context.Categories == null)
            {
                throw new InvalidOperationException("Categories table is not available.");
            }

            return await _context.Categories
                .Include(c => c.Products)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<Category> GetByIdAsync(int id)
        {
            if (_context.Categories == null)
            {
                throw new InvalidOperationException("Categories table is not available.");
            }

            var category = await _context.Categories
                .Include(c => c.Products)
                .AsNoTracking()
                .FirstOrDefaultAsync(c => c.Id == id);

            if (category == null)
            {
                throw new KeyNotFoundException($"Category with ID {id} not found.");
            }

            return category;
        }

        public async Task AddAsync(Category category)
        {
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }

            if (_context.Categories == null)
            {
                throw new InvalidOperationException("Categories table is not available.");
            }

            await _context.Categories.AddAsync(category);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Category category)
        {
            if (category == null)
            {
                throw new ArgumentNullException(nameof(category));
            }

            if (_context.Categories == null)
            {
                throw new InvalidOperationException("Categories table is not available.");
            }

            var existingCategory = await _context.Categories
                .FirstOrDefaultAsync(c => c.Id == category.Id);

            if (existingCategory == null)
            {
                throw new KeyNotFoundException($"Category with ID {category.Id} not found.");
            }

            // Update the existing category's properties
            existingCategory.Name = category.Name;

            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            if (_context.Categories == null)
            {
                throw new InvalidOperationException("Categories table is not available.");
            }

            var category = await _context.Categories.FindAsync(id);

            if (category == null)
            {
                throw new KeyNotFoundException($"Category with ID {id} not found.");
            }

            _context.Categories.Remove(category);
            await _context.SaveChangesAsync();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Data;
using Lab05.WebsiteBanHang.Models;
using Microsoft.EntityFrameworkCore;

namespace Lab05.WebsiteBanHang.Repositories
{
    public class EFOrderRepository : IOrderRepository
    {
        private readonly ApplicationDbContext _context;

        public EFOrderRepository(ApplicationDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        public async Task<IEnumerable<Order>> GetAllAsync()
        {
            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            return await _context.Orders
                .Include(o => o.ApplicationUser)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<Order> GetByIdAsync(int id)
        {
            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            var order = await _context.Orders
                .Include(o => o.ApplicationUser)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .AsNoTracking()
                .FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                throw new KeyNotFoundException($"Order with ID {id} not found.");
            }

            return order;
        }

        public async Task AddAsync(Order order)
        {
            if (order == null)
            {
                throw new ArgumentNullException(nameof(order));
            }

            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            await _context.Orders.AddAsync(order);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Order order)
        {
            if (order == null)
            {
                throw new ArgumentNullException(nameof(order));
            }

            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            var existingOrder = await _context.Orders
                .Include(o => o.OrderDetails)
                .FirstOrDefaultAsync(o => o.Id == order.Id);

            if (existingOrder == null)
            {
                throw new KeyNotFoundException($"Order with ID {order.Id} not found.");
            }

            // Update properties
            existingOrder.Status = order.Status;
            existingOrder.ShippingAddress = order.ShippingAddress;
            existingOrder.Notes = order.Notes;
            existingOrder.TotalPrice = order.TotalPrice;

            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                throw new KeyNotFoundException($"Order with ID {id} not found.");
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();
        }

        public async Task<List<Order>> GetOrdersByUserIdAsync(string userId)
        {
            if (_context.Orders == null)
            {
                throw new InvalidOperationException("Orders table is not available.");
            }

            return await _context.Orders
                .Include(o => o.ApplicationUser)
                .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Product)
                .Where(o => o.UserId == userId)
                .AsNoTracking()
                .ToListAsync();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Data;
using Lab05.WebsiteBanHang.Models;
using Microsoft.EntityFrameworkCore;

namespace Lab05.WebsiteBanHang.Repositories
{
    public class EFProductRepository : IProductRepository
    {
        private readonly ApplicationDbContext _context;

        public EFProductRepository(ApplicationDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        public async Task<IEnumerable<Product>> GetAllAsync()
        {
            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            return await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<Product> GetByIdAsync(int id)
        {
            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            var product = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .AsNoTracking()
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null)
            {
                throw new KeyNotFoundException($"Product with ID {id} not found.");
            }

            return product;
        }

        public async Task AddAsync(Product product)
        {
            if (product == null)
            {
                throw new ArgumentNullException(nameof(product));
            }

            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            await _context.Products.AddAsync(product);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Product product)
        {
            if (product == null)
            {
                throw new ArgumentNullException(nameof(product));
            }

            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            var existingProduct = await _context.Products
                .Include(p => p.Images)
                .FirstOrDefaultAsync(p => p.Id == product.Id);

            if (existingProduct == null)
            {
                throw new KeyNotFoundException($"Product with ID {product.Id} not found.");
            }

            // Update the existing product's properties
            existingProduct.Name = product.Name;
            existingProduct.Price = product.Price;
            existingProduct.Description = product.Description;
            existingProduct.CategoryId = product.CategoryId;
            existingProduct.ImageUrl = product.ImageUrl;

            // Handle images
            if (product.Images != null && product.Images.Any())
            {
                // Remove images that are no longer in the updated product
                var imagesToRemove = existingProduct.Images?
                    .Where(ei => !product.Images.Any(i => i.Id == ei.Id))
                    .ToList();

                if (imagesToRemove != null && imagesToRemove.Any())
                {
                    _context.ProductImages.RemoveRange(imagesToRemove);
                }

                // Add new images
                var newImages = product.Images
                    .Where(i => existingProduct.Images == null || !existingProduct.Images.Any(ei => ei.Id == i.Id))
                    .ToList();

                if (newImages.Any())
                {
                    existingProduct.Images ??= new List<ProductImage>();
                    existingProduct.Images.AddRange(newImages);
                }
            }

            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            var product = await _context.Products.FindAsync(id);

            if (product == null)
            {
                throw new KeyNotFoundException($"Product with ID {id} not found.");
            }

            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
        }

        public async Task<List<Product>> GetFilteredProductsAsync(string searchString, int? categoryId, string sortOrder)
        {
            if (_context.Products == null)
            {
                throw new InvalidOperationException("Products table is not available.");
            }

            var query = _context.Products
                .Include(p => p.Category)
                .Include(p => p.Images)
                .AsQueryable();

            // Tìm kiếm theo tên sản phẩm, không phân biệt chữ hoa/thường
            if (!string.IsNullOrEmpty(searchString))
            {
                // Sử dụng ToLower() để không phân biệt chữ hoa/thường
                query = query.Where(p => p.Name.ToLower().Contains(searchString.ToLower()));
            }

            // Lọc theo danh mục
            if (categoryId.HasValue)
            {
                query = query.Where(p => p.CategoryId == categoryId.Value);
            }

            // Sắp xếp
            switch (sortOrder)
            {
                case "price_desc":
                    query = query.OrderByDescending(p => p.Price);
                    break;
                case "price_asc":
                    query = query.OrderBy(p => p.Price);
                    break;
                default:
                    query = query.OrderBy(p => p.Name); // Mặc định sắp xếp theo tên
                    break;
            }

            return await query.AsNoTracking().ToListAsync();
        }
    }
}
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Models;

namespace Lab05.WebsiteBanHang.Repositories
{
    public interface ICartRepository
    {
        Task<Cart> GetCartByUserIdAsync(string userId);
        Task AddCartItemAsync(CartItem cartItem);
        Task UpdateCartItemAsync(CartItem cartItem);
        Task RemoveCartItemAsync(int cartItemId);
        Task ClearCartAsync(string userId);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Models;

namespace Lab05.WebsiteBanHang.Repositories
{
    public interface ICategoryRepository
    {
        Task<IEnumerable<Category>> GetAllAsync();
        Task<Category> GetByIdAsync(int id);
        Task AddAsync(Category category);
        Task UpdateAsync(Category category);
        Task DeleteAsync(int id);
    }
}
using System.Collections.Generic;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Models;

namespace Lab05.WebsiteBanHang.Repositories
{
    public interface IOrderRepository
    {
        Task<IEnumerable<Order>> GetAllAsync();
        Task<Order> GetByIdAsync(int id);
        Task AddAsync(Order order);
        Task UpdateAsync(Order order);
        Task DeleteAsync(int id);
        Task<List<Order>> GetOrdersByUserIdAsync(string userId);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lab05.WebsiteBanHang.Models;

namespace Lab05.WebsiteBanHang.Repositories
{
    public interface IProductRepository
    {
        Task<IEnumerable<Product>> GetAllAsync();
        Task<Product> GetByIdAsync(int id);
        Task AddAsync(Product product);
        Task UpdateAsync(Product product);
        Task DeleteAsync(int id);
        Task<List<Product>> GetFilteredProductsAsync(string searchString, int? categoryId, string sortOrder);
    }
}