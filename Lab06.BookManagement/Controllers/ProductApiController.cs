using Lab06.BookManagement.Models;
using Lab06.BookManagement.Repositories;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace BookManagementApi.Controllers
{
    [ApiController]
    [Route("api/products")]
    public class ProductApiController : ControllerBase
    {
        private readonly IProductRepository _productRepository;
        private readonly ILogger<ProductApiController> _logger;

        public ProductApiController(IProductRepository productRepository, ILogger<ProductApiController> logger)
        {
            _productRepository = productRepository ?? throw new ArgumentNullException(nameof(productRepository));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        [HttpGet]
        public async Task<IActionResult> GetProducts()
        {
            try
            {
                _logger.LogInformation("Fetching all products...");
                var products = await _productRepository.GetProductsAsync();
                _logger.LogInformation("Products fetched successfully.");
                return Ok(products);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching products.");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetProductById(int id)
        {
            try
            {
                _logger.LogInformation($"Fetching product with ID: {id}");
                var product = await _productRepository.GetProductByIdAsync(id);
                if (product == null)
                {
                    _logger.LogWarning($"Product with ID: {id} not found.");
                    return NotFound();
                }
                _logger.LogInformation($"Product with ID: {id} fetched successfully.");
                return Ok(product);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error fetching product with ID: {id}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost]
        public async Task<IActionResult> AddProduct([FromBody] Product product)
        {
            try
            {
                _logger.LogInformation("Adding new product...");
                if (product == null || string.IsNullOrEmpty(product.Name))
                {
                    _logger.LogWarning("Invalid product data.");
                    return BadRequest("Invalid product data");
                }

                product.Id = 0; // Ensure ID is auto-generated by database
                await _productRepository.AddProductAsync(product);
                _logger.LogInformation($"Product added with ID: {product.Id}");
                return CreatedAtAction(nameof(GetProductById), new { id = product.Id }, product);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error adding product.");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateProduct(int id, [FromBody] Product product)
        {
            try
            {
                _logger.LogInformation($"Updating product with ID: {id}");
                if (id != product.Id)
                {
                    _logger.LogWarning("Product ID mismatch.");
                    return BadRequest("Product ID mismatch");
                }

                // Lấy entity đã được theo dõi
                var existingProduct = await _productRepository.GetProductByIdAsync(id);
                if (existingProduct == null)
                {
                    _logger.LogWarning($"Product with ID: {id} not found.");
                    return NotFound();
                }

                // Cập nhật các thuộc tính của entity đã được theo dõi
                existingProduct.Name = product.Name;
                existingProduct.Price = product.Price;
                existingProduct.Description = product.Description;

                // Lưu thay đổi
                await _productRepository.UpdateProductAsync(existingProduct);
                _logger.LogInformation($"Product with ID: {id} updated successfully.");
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error updating product with ID: {id}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            try
            {
                _logger.LogInformation($"Deleting product with ID: {id}");
                var product = await _productRepository.GetProductByIdAsync(id);
                if (product == null)
                {
                    _logger.LogWarning($"Product with ID: {id} not found.");
                    return NotFound();
                }
                await _productRepository.DeleteProductAsync(id);
                _logger.LogInformation($"Product with ID: {id} deleted successfully.");
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error deleting product with ID: {id}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}